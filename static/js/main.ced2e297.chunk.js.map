{"version":3,"sources":["AppBar/AppBar.tsx","StatusCard/StatusCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SvgComponent","props","xmlns","viewBox","style","enableBackground","xmlSpace","fill","d","AppBar","Box","sx","flexGrow","position","Toolbar","IconButton","size","edge","color","aria-label","mr","width","Typography","variant","component","wait","delay","Promise","resolve","setTimeout","Loader","display","justifyContent","alignItems","height","CircularProgress","StatusCard","React","isLoading","setIsLoading","deviceState","setDeviceState","handleClick","a","minWidth","Card","onClick","CardContent","fontSize","gutterBottom","Grid","container","gap","my","item","Button","Check","Close","xs","fullWidth","mb","List","ListItem","disableGutters","secondaryAction","ContentCopy","ListItemButton","ListItemIcon","Grid3x3","ListItemText","primary","primaryTypographyProps","DevicesOther","App","className","Container","maxWidth","paddingTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","palette","mode","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.ced2e297.chunk.js","sourcesContent":["import * as React from 'react';\nimport MuiAppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport { IconButton } from '@mui/material';\n\nconst SvgComponent = (props: any) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 14.537 14.537\"\n    style={{\n      enableBackground: \"new 0 0 14.537 14.537\",\n    }}\n    xmlSpace=\"preserve\"\n    {...props}\n  >\n    <path\n      style={{\n        fill: \"white\",\n      }}\n      d=\"M13.66 0H.877A.878.878 0 0 0 0 .877V13.66c0 .483.394.877.877.877H13.66a.879.879 0 0 0 .877-.877V.878A.879.879 0 0 0 13.66 0zm-.176 13.485H1.052V1.053h12.432v12.432z\"\n    />\n    <path\n      style={{\n        fill: \"white\",\n      }}\n      d=\"M2.126 8.744h1.605c.15 0 .282-.101.322-.245l.492-1.78.703 3.904a.33.33 0 0 0 .358.273.334.334 0 0 0 .305-.332v-1.82h.95a.334.334 0 0 0 .331-.286l.526-3.619 1.142 6.305a.333.333 0 0 0 .327.273h.002c.16 0 .298-.113.328-.27l.51-2.627h.256l.385.652c.059.1.165.162.281.164a.337.337 0 0 0 .287-.152l.383-.59h.461a.334.334 0 1 0 0-.669h-.642a.336.336 0 0 0-.28.152l-.188.29-.207-.352a.334.334 0 0 0-.288-.164h-.723a.333.333 0 0 0-.328.27l-.223 1.148-1.189-6.567a.334.334 0 0 0-.66.012l-.779 5.36h-.995a.33.33 0 0 0-.105.017l-.529-2.937a.334.334 0 0 0-.314-.274c-.172-.024-.296.094-.337.245l-.815 2.95H2.126a.334.334 0 0 0 0 .669z\"\n    />\n  </svg>\n)\n\nexport default function AppBar() {\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <MuiAppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n          >\n            <SvgComponent width=\"40\" />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            {/* ðŸ’“ IoT Heartbeat */}\n            IoT Heartbeat\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </MuiAppBar>\n    </Box>\n  );\n}","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { CircularProgress, Grid, IconButton, List, ListItem, ListItemButton, ListItemIcon, ListItemText } from '@mui/material';\nimport { Close as CloseIcon, Check as CheckIcon, ContentCopy as ContentCopyIcon, Grid3x3 as Grid3x3Icon, DevicesOther as DevicesOtherIcon } from '@mui/icons-material';\n\nconst wait = (delay: number) => new Promise((resolve) => {\n    setTimeout(() => { resolve(\"done\") }, delay);\n})\n\nconst Loader = () => {\n    return <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"100%\" }}>\n        <CircularProgress color=\"primary\" size={140} />\n    </div>\n}\n\nexport default function StatusCard() {\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [deviceState, setDeviceState] = React.useState(false);\n    const handleClick = async () => {\n        await wait(5000);\n        setIsLoading(true);\n        setDeviceState(true);\n        await wait(1000);\n        setIsLoading(false);\n    };\n    return (\n        <Box sx={{ minWidth: 275 }}>\n            <Card variant=\"outlined\" onClick={handleClick} style={{ height: \"calc(100vh - 90px)\" }}>\n                <CardContent style={{ height: \"100%\" }}>\n                    {isLoading ? <Loader /> :\n                        <>\n                            <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom style={{ fontSize: \"160%\" }}>\n                                NUC 11443323\n                            </Typography>\n                            <Typography variant=\"h5\" component=\"div\" style={{ fontSize: \"300%\" }}>\n                                IP 10.0.100.1\n                            </Typography>\n                            {/* <Typography gutterBottom>\n                                <strong>{deviceState ? \"CONNECTED\" : \"DISCONNECTED\"}</strong>\n                            </Typography> */}\n                            <Grid container gap={2} my={4}>\n                                <Grid item>\n                                    {/* button (pulse)\n                                                          */}\n                                    <Button variant=\"contained\" color={deviceState ? \"success\" : \"error\"} size=\"large\">\n                                        {deviceState ? <CheckIcon /> : <CloseIcon />}\n                                    </Button>\n                                </Grid>\n                                <Grid item xs>\n                                    <Button variant=\"outlined\" fullWidth size=\"large\">{deviceState ? \"CONNECTED\" : \"DISCONNECTED\"}</Button>\n                                </Grid>\n                            </Grid>\n                            <Typography sx={{ mb: 1.5 }} color=\"text.secondary\" style={{ fontSize: \"160%\" }}>\n                                Location: Westfields Oirschot\n                            </Typography>\n                            <List>\n                                <ListItem disableGutters secondaryAction={<IconButton edge=\"end\"><ContentCopyIcon /></IconButton>}>\n                                    <ListItemButton>\n                                        <ListItemIcon>\n                                            <Grid3x3Icon />\n                                        </ListItemIcon>\n                                        <ListItemText primary=\"2454ae245afh141145\" primaryTypographyProps={{ style: { fontSize: \"140%\" } }}></ListItemText>\n                                    </ListItemButton>\n                                </ListItem>\n                                <ListItem disableGutters secondaryAction={<IconButton edge=\"end\"><ContentCopyIcon /></IconButton>}>\n                                    <ListItemButton>\n                                        <ListItemIcon>\n                                            <DevicesOtherIcon />\n                                        </ListItemIcon>\n                                        <ListItemText primary=\"NUC\" primaryTypographyProps={{ style: { fontSize: \"140%\" } }}></ListItemText>\n                                    </ListItemButton>\n                                </ListItem>\n                            </List>\n                        </>}\n                </CardContent>\n            </Card>\n        </Box>\n    );\n}","import { Container } from '@mui/material';\nimport React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport AppBar from './AppBar/AppBar';\nimport StatusCard from './StatusCard/StatusCard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBar />\n      <Container maxWidth={false} style={{ paddingTop: \"1rem\" }}>\n        <StatusCard />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Box, createTheme, ThemeProvider } from '@mui/material';\n\nconst theme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode >,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}